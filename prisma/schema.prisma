generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Grades {
  id        String   @id @default(uuid())
  name      String
  available Boolean  @default(true)
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  leads     Leads[]
}

model User {
  id              String   @id @default(uuid())
  name            String
  paternalSurname String
  maternalSurname String?
  email           String
  password        String
  accessToken     String?  @db.Text
  available       Boolean  @default(true)
  createAt        DateTime @default(now())
  updateAt        DateTime @updatedAt

  additionalInfo AdditionalInfo?
  roles          UsersRoles[]
  Leads          Leads[]
}

model AdditionalInfo {
  id        String @id @default(uuid())
  telephone String
  user      User   @relation(fields: [userId], references: [id])
  userId    String @unique
}

model Roles {
  id         Int          @id @default(autoincrement())
  name       String
  available  Boolean      @default(true)
  createAt   DateTime     @default(now())
  updateAt   DateTime     @updatedAt
  UsersRoles UsersRoles[]
}

model UsersRoles {
  user   User   @relation(fields: [userId], references: [id])
  userId String
  role   Roles  @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([userId, roleId])
}

model Phones {
  id        String   @id @default(uuid())
  telephone String   @unique
  available Boolean  @default(true)
  leadId    String
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  lead      Leads    @relation(fields: [leadId], references: [id])
}

model Emails {
  id        String   @id @default(uuid())
  email     String
  leadId    String
  available Boolean  @default(true)
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  lead      Leads    @relation(fields: [leadId], references: [id])
}

enum Genres {
  MASCULINO
  FEMENINO
}

enum SchoolTypes {
  PRIVADA
  PUBLICA
}

enum EnrollmentStatus {
  INS
  INSO
  REZA
}

model InformationLead {
  id               String            @id @default(uuid())
  name             String?
  genre            Genres?
  careerInterest   String?
  formerSchool     String?
  typeSchool       SchoolTypes?
  enrollmentStatus EnrollmentStatus?
  followUpId       String?
  available        Boolean           @default(true)
  createAt         DateTime          @default(now())
  updateAt         DateTime          @updatedAt
  followUp         FollowUp?         @relation(fields: [followUpId], references: [id])
  Lead             Leads?
}

model FollowUp {
  id              String            @id @default(uuid())
  name            String
  available       Boolean           @default(true)
  createAt        DateTime          @default(now())
  updateAt        DateTime          @updatedAt
  InformationLead InformationLead[]
}

enum CampaignsTypes {
  PAUTA
  ORGANICA
}

model Campaigns {
  id        String         @id @default(uuid())
  name      String
  type      CampaignsTypes
  available Boolean        @default(true)
  createAt  DateTime       @default(now())
  updateAt  DateTime       @updatedAt
  Leads     Leads[]
}

model ContactTypes {
  id        String     @id @default(uuid())
  name      String
  available Boolean    @default(true)
  createAt  DateTime   @default(now())
  updateAt  DateTime   @updatedAt
  asetName  asetName[]
}

model asetName {
  id             String       @id @default(uuid())
  name           String
  contactTypesId String
  contactType    ContactTypes @relation(fields: [contactTypesId], references: [id])
  available      Boolean      @default(true)
  createAt       DateTime     @default(now())
  updateAt       DateTime     @updatedAt
  Leads          Leads[]
}

model Cities {
  id        String   @id @default(uuid())
  name      String
  available Boolean  @default(true)
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  state     States   @relation(fields: [stateId], references: [id])
  stateId   String
  Leads     Leads[]
}

model States {
  id        String    @id @default(uuid())
  name      String
  available Boolean   @default(true)
  createAt  DateTime  @default(now())
  updateAt  DateTime  @updatedAt
  country   Countries @relation(fields: [countryId], references: [id])
  countryId String
  Cities    Cities[]
}

model Countries {
  id        String   @id @default(uuid())
  name      String
  available Boolean  @default(true)
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  States    States[]
}

enum ReferenceTypes {
  NINGUNO
  ALUMNO
  PERSONAL_UNINTER
  FAMILIAR_ALUMNO
}

model References {
  id         String          @id @default(uuid())
  type       ReferenceTypes?
  name       String?
  dataSource String?
  available  Boolean         @default(true)
  createAt   DateTime        @default(now())
  updateAt   DateTime        @updatedAt
  lead       Leads?
  leadsId    String?
}

model Cycles {
  id        String   @id @default(uuid())
  name      String
  cycle     String
  available Boolean  @default(true)
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt
  leads     Leads[]
}

model Leads {
  id          String    @id @default(uuid())
  grade       Grades?   @relation(fields: [gradesId], references: [id])
  dateContact DateTime?
  asetNameId  String?
  referenceId String?   @unique
  campaignId  String?
  cityId      String?
  infoLeadId  String?   @unique
  userId      String?
  cycleId     String?
  semester    String?
  scholarship String?
  program  String? // Similar al de Enrollments, puede venir del front o importación
  intern   String? // Se usará para "Interno" o "Externo"

  available Boolean  @default(true)
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt

  Cycle       Cycles?          @relation(fields: [cycleId], references: [id])
  information InformationLead? @relation(fields: [infoLeadId], references: [id])
  campaign    Campaigns?       @relation(fields: [campaignId], references: [id])
  asetName    asetName?        @relation(fields: [asetNameId], references: [id])
  reference   References?      @relation(fields: [referenceId], references: [id])
  city        Cities?          @relation(fields: [cityId], references: [id])
  user        User?            @relation(fields: [userId], references: [id])
  emails      Emails[]
  phones      Phones[]
  gradesId    String?

  enrollments Enrollments[] // ✅ Relación con Enrollments

  timeline TimeLineLeads[]
  Comments Comments[]
}

model Comments {
  id          String   @id @default(uuid())
  title       String?
  description String   @db.Text
  leadId      String
  Lead        Leads    @relation(fields: [leadId], references: [id])
  available   Boolean  @default(true)
  createAt    DateTime @default(now())
  updateAt    DateTime @updatedAt
}

model Careers {
  id          String        @id @default(uuid())
  name        String
  program     String
  available   Boolean       @default(true)
  createAt    DateTime      @default(now())
  updateAt    DateTime      @updatedAt
  Enrollments Enrollments[]
}

model Payments {
  id             String   @id @default(uuid())
  enrollmentId   String   @unique
  documentNumber String
  amount         Float
  available      Boolean  @default(true)
  createAt       DateTime @default(now())
  updateAt       DateTime @updatedAt

  Enrollment Enrollments @relation("EnrollmentPayment", fields: [enrollmentId], references: [id])
}

model Lists {
  id        String   @id @default(uuid())
  noLista   String?  // <- campo opcional por ahora
  dateStart DateTime
  dateEnd   DateTime
  available Boolean  @default(true)
  createAt  DateTime @default(now())
  updateAt  DateTime @updatedAt

  Enrollments Enrollments[]
}



model Promotions {
  id   String @id @default(uuid())
  name String
  slug String

  available   Boolean       @default(true)
  createAt    DateTime      @default(now())
  updateAt    DateTime      @updatedAt
  Enrollments Enrollments[]
}

model Channels {
  id          String        @id @default(uuid())
  name        String
  available   Boolean       @default(true)
  createAt    DateTime      @default(now())
  updateAt    DateTime      @updatedAt
  Enrollments Enrollments[]
}

model Enrollments {
  id               String    @id @default(uuid())
  listId           String
  careersId        String
  promotionId      String
  channelId        String
  leadId           String
  enrollment_folio String?   // ← Folio de inscripción
  matricula        String?   // ← Matrícula asignada
  curp             String?   // ← CURP del alumno
  scholarship      String?   // ← ✅ Nueva columna para porcentaje o tipo de beca
  comments         String?   // ← Comentarios adicionales sobre la inscripción

  Channel     Channels     @relation(fields: [channelId], references: [id])
  Promotion   Promotions   @relation(fields: [promotionId], references: [id])
  Career      Careers      @relation(fields: [careersId], references: [id])
  List        Lists        @relation(fields: [listId], references: [id])
  Lead        Leads        @relation(fields: [leadId], references: [id])
  Payments    Payments?    @relation("EnrollmentPayment")

  available     Boolean     @default(true)
  createAt      DateTime    @default(now())
  updateAt      DateTime    @updatedAt
}



model TimeLineLeads {
  id            String  @id @default(uuid())
  title         String?
  description   String  @db.Text
  timeableId    String
  timeableModel String
  Leads         Leads   @relation(fields: [leadId], references: [id])
  leadId        String

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
}
